"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[739],{2407:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Creates a new instance of the NodeServer type.","params":[{"name":"island","desc":"","lua_type":"IslandServer"},{"name":"position","desc":"","lua_type":"Vector3"}],"returns":[{"desc":"","lua_type":"NodeServer"}],"function_type":"static","tags":["Static"],"source":{"line":77,"path":"src/Server/NodeServer.luau"}},{"name":"IsConnected","desc":"Returns whether the node is connected to the specified node.","params":[{"name":"node","desc":"","lua_type":"NodeServer"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"method","source":{"line":86,"path":"src/Server/NodeServer.luau"}},{"name":"ConnectNode","desc":"Connects the two nodes.","params":[{"name":"node","desc":"","lua_type":"NodeServer"}],"returns":[],"function_type":"method","source":{"line":94,"path":"src/Server/NodeServer.luau"}},{"name":"ConnectNodes","desc":"Connects this node to multiple nodes at once.","params":[{"name":"nodes","desc":"","lua_type":"{NodeServer}"}],"returns":[],"function_type":"method","source":{"line":102,"path":"src/Server/NodeServer.luau"}},{"name":"DisconnectNode","desc":"Disconnects the two nodes.","params":[{"name":"node","desc":"","lua_type":"NodeServer"}],"returns":[],"function_type":"method","source":{"line":110,"path":"src/Server/NodeServer.luau"}},{"name":"DisconnectNodes","desc":"Disconnects this node from multiple nodes at once.","params":[{"name":"nodes","desc":"","lua_type":"{NodeServer}"}],"returns":[],"function_type":"method","source":{"line":118,"path":"src/Server/NodeServer.luau"}},{"name":"GetConnectedIDs","desc":"Returns the IDs of the nodes connected to this one.","params":[],"returns":[{"desc":"","lua_type":"{number}"}],"function_type":"method","source":{"line":126,"path":"src/Server/NodeServer.luau"}},{"name":"GetGraph","desc":"Returns every node that to which you can get starting from this one going only through the connected ones.\\nIn other words, this returns every node that is contained by the graph this node belongs to.","params":[],"returns":[{"desc":"","lua_type":"{NodeServer}"}],"function_type":"method","source":{"line":135,"path":"src/Server/NodeServer.luau"}},{"name":"FindBestPath","desc":"Returns the shortest path from this node to the specified one using Dijkstra\'s algorithm.\\nReturns nil if no such path exists or if the goal is equal to the start.","params":[{"name":"to","desc":"","lua_type":"NodeServer"}],"returns":[{"desc":"","lua_type":"{NodeServer}?"}],"function_type":"method","source":{"line":145,"path":"src/Server/NodeServer.luau"}},{"name":"Destroy","desc":"Destroys the node and disconnects every connected node from this one.","params":[],"returns":[],"function_type":"method","source":{"line":152,"path":"src/Server/NodeServer.luau"}}],"properties":[{"name":"ID","desc":"The identification property of the node.","lua_type":"number","readonly":true,"source":{"line":24,"path":"src/Server/NodeServer.luau"}},{"name":"Island","desc":"The island the node is associated with.\\n\\n:::tip\\nUse this property if you have a node and you need to interact with the island the node is on.\\n:::","lua_type":"IslandServer","readonly":true,"source":{"line":36,"path":"src/Server/NodeServer.luau"}},{"name":"Position","desc":"The real world position of the node.","lua_type":"Vector3","readonly":true,"source":{"line":44,"path":"src/Server/NodeServer.luau"}},{"name":"ConnectedNodes","desc":"What nodes are connected to this one and how far they are.\\n\\n:::info\\nThe table value of nodeA.ConnectedNodes[nodeB] is the distance between nodeA and nodeB.\\n:::","lua_type":"{[NodeServer]: number}","readonly":true,"source":{"line":56,"path":"src/Server/NodeServer.luau"}},{"name":"Replication","desc":"This handles the basic needs of the node\'s replication,\\nlike what players to replicate the node to etc.","lua_type":"ReplicationServer","private":true,"readonly":true,"source":{"line":66,"path":"src/Server/NodeServer.luau"}}],"types":[],"name":"NodeServer","desc":"This class holds the data of every node on the island.\\n\\nEvery straight road starts and ends with a node.\\nIf the road has a curve, it gets broken into two straight roads both starting and ending with one node.\\nThe HQ and every city have a node associated with them by default.\\n\\n:::danger\\nChanging any of the object\'s properties directly may lead to unexpected behavior.\\nAll of the properties should be only read and changed only through the object\'s methods.\\n:::","realm":["Server"],"source":{"line":16,"path":"src/Server/NodeServer.luau"}}')}}]);