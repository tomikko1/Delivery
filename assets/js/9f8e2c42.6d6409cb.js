"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[448],{6461:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Creates a new instance of the ReplicationServer type.","params":[{"name":"replicateFunction","desc":"The function it should call on a player when they get added to the replication","lua_type":"(player: Player) -> ()"},{"name":"removeReplicationFunction","desc":"The function it should call on a player when they get removed from the replication","lua_type":"(player: Player) -> ()"}],"returns":[{"desc":"","lua_type":"ReplicationServer"}],"function_type":"static","tags":["Static"],"source":{"line":90,"path":"src/Server/ReplicationServer.luau"}},{"name":"WaitUntilReady","desc":"Yields until the speficied player gets ready to receive updates.","params":[{"name":"player","desc":"","lua_type":"Player"},{"name":"timeout","desc":"The maximum time it should wait for","lua_type":"number"}],"returns":[{"desc":"Whether the specified player got ready before the timeout time passed","lua_type":"boolean"}],"function_type":"static","tags":["Static"],"yields":true,"source":{"line":102,"path":"src/Server/ReplicationServer.luau"}},{"name":"AddToReplication","desc":"Adds the new players to the replication of the object.\\nIn other words, this calls the provided function to replicate with each new player as the argument.\\n\\nIf the player was already replicated to, it leaves them out.","params":[{"name":"players","desc":"What new players the object should be replicated to","lua_type":"{[Player]: true}"}],"returns":[],"function_type":"method","source":{"line":113,"path":"src/Server/ReplicationServer.luau"}},{"name":"RemoveFromReplication","desc":"Removes the players from the replication of the object.\\nIn other words, this calls the provided function to stop replicating with each new player as the argument.\\n\\nIf the player wasn\'t replicated to, it leaves them out.","params":[{"name":"players","desc":"What players the object shouldn\'t be replicated to anymore","lua_type":"{[Player]: true}"}],"returns":[],"function_type":"method","source":{"line":124,"path":"src/Server/ReplicationServer.luau"}},{"name":"Destroy","desc":"Destroy\'s the replication.\\n\\n:::warning\\nThe :Destroy method doesn\'t call the remove function on the replication\'s players.\\nAll it does it that it clears the [ReplicationServer.ReplicatedTo] table.\\n:::","params":[],"returns":[],"function_type":"method","source":{"line":136,"path":"src/Server/ReplicationServer.luau"}}],"properties":[{"name":"ReplicatedTo","desc":"Contains the players that the object should be replicated to in a set.","lua_type":"{[Player]: true}","readonly":true,"source":{"line":33,"path":"src/Server/ReplicationServer.luau"}},{"name":"_replicateFunction","desc":"This is the provided function that is run for each player that gets added to the replication.","lua_type":"(player: Player) -> ()","private":true,"readonly":true,"source":{"line":42,"path":"src/Server/ReplicationServer.luau"}},{"name":"_removeReplicationFunction","desc":"This is the provided function that is run for each player that gets removed from the replication.","lua_type":"(player: Player) -> ()","private":true,"readonly":true,"source":{"line":51,"path":"src/Server/ReplicationServer.luau"}},{"name":"ReadyPlayers","desc":"Contains the players that are ready to receive updates in a set.\\n\\n:::warning\\nThis property is static, meaning it can only be accessed from the base class returned by requiring the module,\\nnot from objects of the ReplicationServer type.\\n:::","lua_type":"{[Player]: true}","tags":["Static"],"readonly":true,"source":{"line":65,"path":"src/Server/ReplicationServer.luau"}},{"name":"PlayerReady","desc":"Gets fired every time a new player gets ready to receive updates with the player as the argument.\\n\\n:::warning\\nThis property is static, meaning it can only be accessed from the base class returned by requiring the module,\\nnot from objects of the ReplicationServer type.\\n:::","lua_type":"Signal","tags":["Static"],"readonly":true,"source":{"line":79,"path":"src/Server/ReplicationServer.luau"}}],"types":[],"name":"ReplicationServer","desc":"This class handles the basic common needs of replication of any object.\\n\\n:::warning\\nThis class doesn\'t handle all the replication that needs to be done.\\nIt handles only the basic common needs, meaning\\nstoring the players that the object should be replicated to,\\nreplicating the object on creation and\\nreplicating destroy method with functions that are provided to it.\\n\\nIt uses this logic to handle adding and removing players to and from replication.\\nSimply, this means that every time some player is removed from the replication,\\nthis class will invoke the :Destroy() method on the client as if the object was destroyed,\\neven though it remains living on the server.\\n:::\\n\\n:::danger\\nChanging any of the object\'s properties directly may lead to unexpected behavior.\\nAll of the properties should be only read and changed only through the object\'s methods.\\n:::","realm":["Server"],"source":{"line":25,"path":"src/Server/ReplicationServer.luau"}}')}}]);