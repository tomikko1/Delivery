{"searchDocs":[{"title":"ConfigTypes","type":0,"sectionRef":"#","url":"/Delivery/api/ConfigTypes","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"ConfigTypes","url":"/Delivery/api/ConfigTypes#types","content":" ","version":null,"tagName":"h2"},{"title":"ConfigType​","type":1,"pageTitle":"ConfigTypes","url":"/Delivery/api/ConfigTypes#ConfigType","content":"&lt;/&gt; type ConfigType = &quot;Truck&quot; | &quot;Package&quot; | &quot;City&quot; The type of the config.  ","version":null,"tagName":"h3"},{"title":"TruckType​","type":1,"pageTitle":"ConfigTypes","url":"/Delivery/api/ConfigTypes#TruckType","content":"&lt;/&gt; type TruckType = &quot;Pickup&quot; | &quot;Truck&quot; | &quot;Van&quot; | &quot;MegaTruck&quot; The type of the truck.  ","version":null,"tagName":"h3"},{"title":"TruckConfig​","type":1,"pageTitle":"ConfigTypes","url":"/Delivery/api/ConfigTypes#TruckConfig","content":"&lt;/&gt; interface TruckConfig { Price: number Capacity: number-- Based on the weight of packages Speed: number Icon: string } The truck's config.  ","version":null,"tagName":"h3"},{"title":"PackageType​","type":1,"pageTitle":"ConfigTypes","url":"/Delivery/api/ConfigTypes#PackageType","content":"&lt;/&gt; type PackageType = &quot;Common&quot; | &quot;Rare&quot; | &quot;Epic&quot; The type of the package.  ","version":null,"tagName":"h3"},{"title":"PackageConfig​","type":1,"pageTitle":"ConfigTypes","url":"/Delivery/api/ConfigTypes#PackageConfig","content":"&lt;/&gt; interface PackageConfig { Weight: number-- How much capacity will the package take DefaultPrice: number TimeToDeliver: number-- How much time the player has to deliver the package Chance: number-- What chance there is that a city will spawn this package Icon: string } The package's config. WARNING Chance isn't implemented yet. As of writing this documentation, every city can spawn only Common packages.  ","version":null,"tagName":"h3"},{"title":"CityType​","type":1,"pageTitle":"ConfigTypes","url":"/Delivery/api/ConfigTypes#CityType","content":"&lt;/&gt; type CityType = &quot;Yellow&quot; | &quot;Blue&quot; | &quot;Green&quot; | &quot;Red&quot; The type of the city.  ","version":null,"tagName":"h3"},{"title":"CityConfig​","type":1,"pageTitle":"ConfigTypes","url":"/Delivery/api/ConfigTypes#CityConfig","content":"&lt;/&gt; interface CityConfig { SpawnCooldown: number-- In seconds, how long it takes to spawn a package } The city's config.  ","version":null,"tagName":"h3"},{"title":"HeadquartersConfig​","type":1,"pageTitle":"ConfigTypes","url":"/Delivery/api/ConfigTypes#HeadquartersConfig","content":"&lt;/&gt; interface HeadquartersConfig { Income: number-- Per second PackageCapacity: number-- How many packages (no matter the weight) can the island have concurrently TruckCapacity: number-- How many trucks can the island have concurrently Price: number-- How much does it cost to upgrade to this level from the previous one } The headquarter's config at its current level.  ","version":null,"tagName":"h3"},{"title":"IslandType​","type":1,"pageTitle":"ConfigTypes","url":"/Delivery/api/ConfigTypes#IslandType","content":"&lt;/&gt; type IslandType = &quot;IslandTemplate&quot; The type of the island. ","version":null,"tagName":"h3"},{"title":"PackageServer","type":0,"sectionRef":"#","url":"/Delivery/api/PackageServer","content":"","keywords":"","version":null},{"title":"Properties​","type":1,"pageTitle":"PackageServer","url":"/Delivery/api/PackageServer#properties","content":" ","version":null,"tagName":"h2"},{"title":"ID​","type":1,"pageTitle":"PackageServer","url":"/Delivery/api/PackageServer#ID","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; PackageServer.ID: number The identification property of the package.  ","version":null,"tagName":"h3"},{"title":"Island​","type":1,"pageTitle":"PackageServer","url":"/Delivery/api/PackageServer#Island","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; PackageServer.Island: IslandServer The island the package is associated with. TIP Use this property if you have a package and you need to interact with the island the package is on.  ","version":null,"tagName":"h3"},{"title":"Type​","type":1,"pageTitle":"PackageServer","url":"/Delivery/api/PackageServer#Type","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; PackageServer.Type: ConfigTypes.PackageType What type the package is.  ","version":null,"tagName":"h3"},{"title":"Config​","type":1,"pageTitle":"PackageServer","url":"/Delivery/api/PackageServer#Config","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; PackageServer.Config: ConfigTypes.PackageConfig The package's config.  ","version":null,"tagName":"h3"},{"title":"Price​","type":1,"pageTitle":"PackageServer","url":"/Delivery/api/PackageServer#Price","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; PackageServer.Price: number The price at which the package will be sold. This is equal to the price in the package's config + some random deviation by 10% at most.  ","version":null,"tagName":"h3"},{"title":"Destination​","type":1,"pageTitle":"PackageServer","url":"/Delivery/api/PackageServer#Destination","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; PackageServer.Destination: CityServer The city that spawned the package and is requesting it to be delivered.  ","version":null,"tagName":"h3"},{"title":"Departed​","type":1,"pageTitle":"PackageServer","url":"/Delivery/api/PackageServer#Departed","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; PackageServer.Departed: boolean True when the package is out of HQ, false otherwise. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"PackageServer","url":"/Delivery/api/PackageServer#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"PackageServer","url":"/Delivery/api/PackageServer#new","content":"Static &lt;/&gt; PackageServer.new( island: IslandServer, type: ConfigTypes.PackageType, destination: CityServer ) → PackageServer Creates a new instance of the PackageServer type.  ","version":null,"tagName":"h3"},{"title":"UpdateDeparted​","type":1,"pageTitle":"PackageServer","url":"/Delivery/api/PackageServer#UpdateDeparted","content":"&lt;/&gt; PackageServer:UpdateDeparted( departed: boolean-- The value [Package.Departed] should be updated to ) → () Updates the value of [Package.Departed].  ","version":null,"tagName":"h3"},{"title":"Destroy​","type":1,"pageTitle":"PackageServer","url":"/Delivery/api/PackageServer#Destroy","content":"&lt;/&gt; PackageServer:Destroy() → () Destroys the package. ","version":null,"tagName":"h3"},{"title":"RoadServer","type":0,"sectionRef":"#","url":"/Delivery/api/RoadServer","content":"","keywords":"","version":null},{"title":"Properties​","type":1,"pageTitle":"RoadServer","url":"/Delivery/api/RoadServer#properties","content":" ","version":null,"tagName":"h2"},{"title":"ID​","type":1,"pageTitle":"RoadServer","url":"/Delivery/api/RoadServer#ID","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; RoadServer.ID: number The identification property of the road.  ","version":null,"tagName":"h3"},{"title":"Island​","type":1,"pageTitle":"RoadServer","url":"/Delivery/api/RoadServer#Island","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; RoadServer.Island: IslandServer The island the road is associated with. TIP Use this property if you have a road and you need to interact with the island the road is on.  ","version":null,"tagName":"h3"},{"title":"Node1​","type":1,"pageTitle":"RoadServer","url":"/Delivery/api/RoadServer#Node1","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; RoadServer.Node1: NodeServer The first node of the road.  ","version":null,"tagName":"h3"},{"title":"Node2​","type":1,"pageTitle":"RoadServer","url":"/Delivery/api/RoadServer#Node2","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; RoadServer.Node2: NodeServer The second node of the road. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"RoadServer","url":"/Delivery/api/RoadServer#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"RoadServer","url":"/Delivery/api/RoadServer#new","content":"Static &lt;/&gt; RoadServer.new( island: IslandServer, node1: NodeServer, node2: NodeServer ) → RoadServer Creates a new instance of the RoadServer type.  ","version":null,"tagName":"h3"},{"title":"IsConnected​","type":1,"pageTitle":"RoadServer","url":"/Delivery/api/RoadServer#IsConnected","content":"&lt;/&gt; RoadServer:IsConnected(node: NodeServer) → boolean Returns whether the node is a part of the road. Equivalent to: node == road.Node1 or node == road.Node2   ","version":null,"tagName":"h3"},{"title":"GetClosestPointOnRoad​","type":1,"pageTitle":"RoadServer","url":"/Delivery/api/RoadServer#GetClosestPointOnRoad","content":"&lt;/&gt; RoadServer:GetClosestPointOnRoad(position: Vector3 ) → Vector3  Returns the closest point to the specified position that lies on the road.  ","version":null,"tagName":"h3"},{"title":"SplitRoad​","type":1,"pageTitle":"RoadServer","url":"/Delivery/api/RoadServer#SplitRoad","content":"&lt;/&gt; RoadServer:SplitRoad(position: Vector3 ) → NodeServer Splits the road into two at the specified position and creates a new connecting node between them, which it also returns.  ","version":null,"tagName":"h3"},{"title":"Destroy​","type":1,"pageTitle":"RoadServer","url":"/Delivery/api/RoadServer#Destroy","content":"&lt;/&gt; RoadServer:Destroy() → () Destroys the road. ","version":null,"tagName":"h3"},{"title":"CityServer","type":0,"sectionRef":"#","url":"/Delivery/api/CityServer","content":"","keywords":"","version":null},{"title":"Properties​","type":1,"pageTitle":"CityServer","url":"/Delivery/api/CityServer#properties","content":" ","version":null,"tagName":"h2"},{"title":"ID​","type":1,"pageTitle":"CityServer","url":"/Delivery/api/CityServer#ID","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; CityServer.ID: number The identification property of the city.  ","version":null,"tagName":"h3"},{"title":"Island​","type":1,"pageTitle":"CityServer","url":"/Delivery/api/CityServer#Island","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; CityServer.Island: IslandServer The island the city is associated with. TIP Use this property if you have a city and you need to interact with the island the city is on.  ","version":null,"tagName":"h3"},{"title":"Type​","type":1,"pageTitle":"CityServer","url":"/Delivery/api/CityServer#Type","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; CityServer.Type: ConfigTypes.CityType What type the city is.  ","version":null,"tagName":"h3"},{"title":"Config​","type":1,"pageTitle":"CityServer","url":"/Delivery/api/CityServer#Config","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; CityServer.Config: ConfigTypes.CityConfig The city's config.  ","version":null,"tagName":"h3"},{"title":"Position​","type":1,"pageTitle":"CityServer","url":"/Delivery/api/CityServer#Position","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; CityServer.Position: Vector3  The position the city is located at. This should be equal to city.Node.Position  ","version":null,"tagName":"h3"},{"title":"Node​","type":1,"pageTitle":"CityServer","url":"/Delivery/api/CityServer#Node","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; CityServer.Node: NodeServer The node the city's associated with. Every city has exactly one node, even if it isn't connected to any road yet. The city acts only as an addition to the node, making it special compared to its basic form.  ","version":null,"tagName":"h3"},{"title":"ConnectedToHQ​","type":1,"pageTitle":"CityServer","url":"/Delivery/api/CityServer#ConnectedToHQ","content":"&lt;/&gt; CityServer.ConnectedToHQ: boolean True if the city's node has a connection to the island's HQ. This is set externally (from the island when a new road connection appears).  ","version":null,"tagName":"h3"},{"title":"Spawning​","type":1,"pageTitle":"CityServer","url":"/Delivery/api/CityServer#Spawning","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; CityServer.Spawning: boolean True if the city is currently running the loop to spawn packages, false otherwise. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"CityServer","url":"/Delivery/api/CityServer#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"CityServer","url":"/Delivery/api/CityServer#new","content":"Static &lt;/&gt; CityServer.new( island: IslandServer, cityType: ConfigTypes.CityType, node: NodeServer-- The node associated with the city ) → CityServer Creates a new instance of the CityServer type.  ","version":null,"tagName":"h3"},{"title":"newFromPosition​","type":1,"pageTitle":"CityServer","url":"/Delivery/api/CityServer#newFromPosition","content":"Static &lt;/&gt; CityServer.newFromPosition( island: IslandServer, cityType: ConfigTypes.CityType, position: Vector3 ) → CityServer Creates a new instance of the CityServer type. This function also creates a new NodeServer object at the specified position and uses it as the node the city will be associated with.  ","version":null,"tagName":"h3"},{"title":"StartSpawningPackages​","type":1,"pageTitle":"CityServer","url":"/Delivery/api/CityServer#StartSpawningPackages","content":"&lt;/&gt; CityServer:StartSpawningPackages() → () If the city is connected to HQ and isn't already spawning, this method starts the loop to spawn packages. The loops breaks once the city is not connected to HQ anymore.  ","version":null,"tagName":"h3"},{"title":"Destroy​","type":1,"pageTitle":"CityServer","url":"/Delivery/api/CityServer#Destroy","content":"&lt;/&gt; CityServer:Destroy() → () Destroys the city. ","version":null,"tagName":"h3"},{"title":"NodeServer","type":0,"sectionRef":"#","url":"/Delivery/api/NodeServer","content":"","keywords":"","version":null},{"title":"Properties​","type":1,"pageTitle":"NodeServer","url":"/Delivery/api/NodeServer#properties","content":" ","version":null,"tagName":"h2"},{"title":"ID​","type":1,"pageTitle":"NodeServer","url":"/Delivery/api/NodeServer#ID","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; NodeServer.ID: number The identification property of the node.  ","version":null,"tagName":"h3"},{"title":"Island​","type":1,"pageTitle":"NodeServer","url":"/Delivery/api/NodeServer#Island","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; NodeServer.Island: IslandServer The island the node is associated with. TIP Use this property if you have a node and you need to interact with the island the node is on.  ","version":null,"tagName":"h3"},{"title":"Position​","type":1,"pageTitle":"NodeServer","url":"/Delivery/api/NodeServer#Position","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; NodeServer.Position: Vector3  The real world position of the node.  ","version":null,"tagName":"h3"},{"title":"ConnectedNodes​","type":1,"pageTitle":"NodeServer","url":"/Delivery/api/NodeServer#ConnectedNodes","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; NodeServer.ConnectedNodes: {[NodeServer]: number} What nodes are connected to this one and how far they are. INFO The table value of nodeA.ConnectedNodes[nodeB] is the distance between nodeA and nodeB. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"NodeServer","url":"/Delivery/api/NodeServer#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"NodeServer","url":"/Delivery/api/NodeServer#new","content":"Static &lt;/&gt; NodeServer.new( island: IslandServer, position: Vector3 ) → NodeServer Creates a new instance of the NodeServer type.  ","version":null,"tagName":"h3"},{"title":"IsConnected​","type":1,"pageTitle":"NodeServer","url":"/Delivery/api/NodeServer#IsConnected","content":"&lt;/&gt; NodeServer:IsConnected(node: NodeServer) → boolean Returns whether the node is connected to the specified node.  ","version":null,"tagName":"h3"},{"title":"ConnectNode​","type":1,"pageTitle":"NodeServer","url":"/Delivery/api/NodeServer#ConnectNode","content":"&lt;/&gt; NodeServer:ConnectNode(node: NodeServer) → () Connects the two nodes.  ","version":null,"tagName":"h3"},{"title":"ConnectNodes​","type":1,"pageTitle":"NodeServer","url":"/Delivery/api/NodeServer#ConnectNodes","content":"&lt;/&gt; NodeServer:ConnectNodes(nodes: {NodeServer}) → () Connects this node to multiple nodes at once.  ","version":null,"tagName":"h3"},{"title":"DisconnectNode​","type":1,"pageTitle":"NodeServer","url":"/Delivery/api/NodeServer#DisconnectNode","content":"&lt;/&gt; NodeServer:DisconnectNode(node: NodeServer) → () Disconnects the two nodes.  ","version":null,"tagName":"h3"},{"title":"DisconnectNodes​","type":1,"pageTitle":"NodeServer","url":"/Delivery/api/NodeServer#DisconnectNodes","content":"&lt;/&gt; NodeServer:DisconnectNodes(nodes: {NodeServer}) → () Disconnects this node from multiple nodes at once.  ","version":null,"tagName":"h3"},{"title":"GetConnectedIDs​","type":1,"pageTitle":"NodeServer","url":"/Delivery/api/NodeServer#GetConnectedIDs","content":"&lt;/&gt; NodeServer:GetConnectedIDs() → {number} Returns the IDs of the nodes connected to this one.  ","version":null,"tagName":"h3"},{"title":"GetGraph​","type":1,"pageTitle":"NodeServer","url":"/Delivery/api/NodeServer#GetGraph","content":"&lt;/&gt; NodeServer:GetGraph() → {NodeServer} Returns every node that to which you can get starting from this one going only through the connected ones. In other words, this returns every node that is contained by the graph this node belongs to.  ","version":null,"tagName":"h3"},{"title":"FindBestPath​","type":1,"pageTitle":"NodeServer","url":"/Delivery/api/NodeServer#FindBestPath","content":"&lt;/&gt; NodeServer:FindBestPath(to: NodeServer) → {NodeServer}? Returns the shortest path from this node to the specified one using Dijkstra's algorithm. Returns nil if no such path exists or if the goal is equal to the start.  ","version":null,"tagName":"h3"},{"title":"Destroy​","type":1,"pageTitle":"NodeServer","url":"/Delivery/api/NodeServer#Destroy","content":"&lt;/&gt; NodeServer:Destroy() → () Destroys the node and disconnects every connected node from this one. ","version":null,"tagName":"h3"},{"title":"TruckServer","type":0,"sectionRef":"#","url":"/Delivery/api/TruckServer","content":"","keywords":"","version":null},{"title":"Properties​","type":1,"pageTitle":"TruckServer","url":"/Delivery/api/TruckServer#properties","content":" ","version":null,"tagName":"h2"},{"title":"ID​","type":1,"pageTitle":"TruckServer","url":"/Delivery/api/TruckServer#ID","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; TruckServer.ID: number The identification property of the truck.  ","version":null,"tagName":"h3"},{"title":"Island​","type":1,"pageTitle":"TruckServer","url":"/Delivery/api/TruckServer#Island","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; TruckServer.Island: IslandServer The island the truck is associated with. TIP Use this property if you have a truck and you need to interact with the island the truck is on.  ","version":null,"tagName":"h3"},{"title":"Type​","type":1,"pageTitle":"TruckServer","url":"/Delivery/api/TruckServer#Type","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; TruckServer.Type: ConfigTypes.TruckType What type the truck is.  ","version":null,"tagName":"h3"},{"title":"Config​","type":1,"pageTitle":"TruckServer","url":"/Delivery/api/TruckServer#Config","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; TruckServer.Config: ConfigTypes.TruckConfig The truck's config.  ","version":null,"tagName":"h3"},{"title":"CarryingWeight​","type":1,"pageTitle":"TruckServer","url":"/Delivery/api/TruckServer#CarryingWeight","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; TruckServer.CarryingWeight: number What weight the truck is carrying.  ","version":null,"tagName":"h3"},{"title":"Packages​","type":1,"pageTitle":"TruckServer","url":"/Delivery/api/TruckServer#Packages","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; TruckServer.Packages: {[ID]: PackageServer} A list of the packages the truck is carrying.  ","version":null,"tagName":"h3"},{"title":"Traveling​","type":1,"pageTitle":"TruckServer","url":"/Delivery/api/TruckServer#Traveling","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; TruckServer.Traveling: boolean True when the truck is traveling, false otherwise.  ","version":null,"tagName":"h3"},{"title":"CurrentNode​","type":1,"pageTitle":"TruckServer","url":"/Delivery/api/TruckServer#CurrentNode","content":"This item is read only and cannot be modified. Read Only unreleased &lt;/&gt; TruckServer.CurrentNode: NodeServer? The last node the truck has been to. DANGER This property is not being used yet and therefore its behavior isn't thoroughly tested. Changing it shouldn't have any implemented behavior.  ","version":null,"tagName":"h3"},{"title":"DestinationReached:​","type":1,"pageTitle":"TruckServer","url":"/Delivery/api/TruckServer#DestinationReached:","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; TruckServer.DestinationReached:: Signal &lt;NodeServer&gt; This signal fires every time a truck has reached its destination, whether that was a city the truck delivered packages to or the HQ. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"TruckServer","url":"/Delivery/api/TruckServer#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"TruckServer","url":"/Delivery/api/TruckServer#new","content":"Static &lt;/&gt; TruckServer.new( island: IslandServer, type: ConfigTypes.TruckType ) → TruckServer Creates a new instance of the TruckServer type.  ","version":null,"tagName":"h3"},{"title":"GetTruckSellPrice​","type":1,"pageTitle":"TruckServer","url":"/Delivery/api/TruckServer#GetTruckSellPrice","content":"Static &lt;/&gt; TruckServer.GetTruckSellPrice(type: ConfigTypes.TruckType) → number Returns the sell price at which a truck of the specified type would be sold.  ","version":null,"tagName":"h3"},{"title":"Travel​","type":1,"pageTitle":"TruckServer","url":"/Delivery/api/TruckServer#Travel","content":"&lt;/&gt; TruckServer:Travel( from: NodeServer, to: NodeServer ) → () Makes the truck physically travel between the nodes. The path between the nodes will be determined by the NodeServer:FindBestPath method.  ","version":null,"tagName":"h3"},{"title":"TravelFullCourse​","type":1,"pageTitle":"TruckServer","url":"/Delivery/api/TruckServer#TravelFullCourse","content":"&lt;/&gt; TruckServer:TravelFullCourse() → () Makes the truck deliver all packages it has in its inventory, to every city it needs to go to.  ","version":null,"tagName":"h3"},{"title":"AddPackage​","type":1,"pageTitle":"TruckServer","url":"/Delivery/api/TruckServer#AddPackage","content":"&lt;/&gt; TruckServer:AddPackage(package: PackageServer) → () Adds the specified package to the truck's inventory while increasing the TruckServer.CarryingWeight property.  ","version":null,"tagName":"h3"},{"title":"AddPackages​","type":1,"pageTitle":"TruckServer","url":"/Delivery/api/TruckServer#AddPackages","content":"&lt;/&gt; TruckServer:AddPackages(packages: {PackageServer}) → () Adds the specified packages at once to the truck's inventory while increasing the TruckServer.CarryingWeight property.  ","version":null,"tagName":"h3"},{"title":"RemovePackages​","type":1,"pageTitle":"TruckServer","url":"/Delivery/api/TruckServer#RemovePackages","content":"&lt;/&gt; TruckServer:RemovePackages( packages: {PackageServer}, returnToHQ: boolean?-- Whether the packages should be returned to HQ or just removed ) → () Removes the specified packages at once from the truck's inventory while decreasing the TruckServer.CarryingWeight property.  ","version":null,"tagName":"h3"},{"title":"SellPackages​","type":1,"pageTitle":"TruckServer","url":"/Delivery/api/TruckServer#SellPackages","content":"&lt;/&gt; TruckServer:SellPackages( city: CityServer,-- City to which the truck is selling the packages packages: {PackageServer} ) → () Sells the specified packages at once and calls the TruckServer.RemovePackages method. Increases the IslandServer.TotalPackages stat and adds cash reward to the island.  ","version":null,"tagName":"h3"},{"title":"LoadPackages​","type":1,"pageTitle":"TruckServer","url":"/Delivery/api/TruckServer#LoadPackages","content":"&lt;/&gt; TruckServer:LoadPackages() → () Picks the best available packages from the HQ and loads the truck with them. This method prioritizes grouping packages from the same city, to minimize the truck's travel distance.  ","version":null,"tagName":"h3"},{"title":"Destroy​","type":1,"pageTitle":"TruckServer","url":"/Delivery/api/TruckServer#Destroy","content":"&lt;/&gt; TruckServer:Destroy() → () Destroy's the truck. ","version":null,"tagName":"h3"},{"title":"ReplicationServer","type":0,"sectionRef":"#","url":"/Delivery/api/ReplicationServer","content":"","keywords":"","version":null},{"title":"Properties​","type":1,"pageTitle":"ReplicationServer","url":"/Delivery/api/ReplicationServer#properties","content":" ","version":null,"tagName":"h2"},{"title":"ReplicatedTo​","type":1,"pageTitle":"ReplicationServer","url":"/Delivery/api/ReplicationServer#ReplicatedTo","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; ReplicationServer.ReplicatedTo: {[Player ]: true} Contains the players that the object should be replicated to in a set.  ","version":null,"tagName":"h3"},{"title":"ReadyPlayers​","type":1,"pageTitle":"ReplicationServer","url":"/Delivery/api/ReplicationServer#ReadyPlayers","content":"This item is read only and cannot be modified. Read Only Static &lt;/&gt; ReplicationServer.ReadyPlayers: {[Player ]: true} Contains the players that are ready to receive updates in a set. WARNING This property is static, meaning it can only be accessed from the base class returned by requiring the module, not from objects of the ReplicationServer type.  ","version":null,"tagName":"h3"},{"title":"PlayerReady​","type":1,"pageTitle":"ReplicationServer","url":"/Delivery/api/ReplicationServer#PlayerReady","content":"This item is read only and cannot be modified. Read Only Static &lt;/&gt; ReplicationServer.PlayerReady: Signal  Gets fired every time a new player gets ready to receive updates with the player as the argument. WARNING This property is static, meaning it can only be accessed from the base class returned by requiring the module, not from objects of the ReplicationServer type. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"ReplicationServer","url":"/Delivery/api/ReplicationServer#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"ReplicationServer","url":"/Delivery/api/ReplicationServer#new","content":"Static &lt;/&gt; ReplicationServer.new( replicateFunction: (player: Player ) → (),-- The function it should call on a player when they get added to the replication removeReplicationFunction: (player: Player ) → ()-- The function it should call on a player when they get removed from the replication ) → ReplicationServer Creates a new instance of the ReplicationServer type.  ","version":null,"tagName":"h3"},{"title":"WaitUntilReady​","type":1,"pageTitle":"ReplicationServer","url":"/Delivery/api/ReplicationServer#WaitUntilReady","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields Static &lt;/&gt; ReplicationServer.WaitUntilReady( player: Player , timeout: number-- The maximum time it should wait for ) → boolean-- Whether the specified player got ready before the timeout time passed Yields until the speficied player gets ready to receive updates.  ","version":null,"tagName":"h3"},{"title":"AddToReplication​","type":1,"pageTitle":"ReplicationServer","url":"/Delivery/api/ReplicationServer#AddToReplication","content":"&lt;/&gt; ReplicationServer:AddToReplication( players: {[Player ]: true}-- What new players the object should be replicated to ) → () Adds the new players to the replication of the object. In other words, this calls the provided function to replicate with each new player as the argument. If the player was already replicated to, it leaves them out.  ","version":null,"tagName":"h3"},{"title":"RemoveFromReplication​","type":1,"pageTitle":"ReplicationServer","url":"/Delivery/api/ReplicationServer#RemoveFromReplication","content":"&lt;/&gt; ReplicationServer:RemoveFromReplication( players: {[Player ]: true}-- What players the object shouldn't be replicated to anymore ) → () Removes the players from the replication of the object. In other words, this calls the provided function to stop replicating with each new player as the argument. If the player wasn't replicated to, it leaves them out.  ","version":null,"tagName":"h3"},{"title":"Destroy​","type":1,"pageTitle":"ReplicationServer","url":"/Delivery/api/ReplicationServer#Destroy","content":"&lt;/&gt; ReplicationServer:Destroy() → () Destroy's the replication. WARNING The :Destroy method doesn't call the remove function on the replication's players. All it does it that it clears the ReplicationServer.ReplicatedTo table. ","version":null,"tagName":"h3"},{"title":"IslandServer","type":0,"sectionRef":"#","url":"/Delivery/api/IslandServer","content":"","keywords":"","version":null},{"title":"Properties​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#properties","content":" ","version":null,"tagName":"h2"},{"title":"ID​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#ID","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; IslandServer.ID: number The identification property of the island.  ","version":null,"tagName":"h3"},{"title":"Owner​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#Owner","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; IslandServer.Owner: Player | {UserId: number} The owner of the island. If the island is not owned by a player, this property is equal to the table {UserId = 0}.  ","version":null,"tagName":"h3"},{"title":"OwnedByPlayer​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#OwnedByPlayer","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; IslandServer.OwnedByPlayer: boolean True when the the island is owned by a player and false otherwise.  ","version":null,"tagName":"h3"},{"title":"Loaded​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#Loaded","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; IslandServer.Loaded: boolean True when the island is spawned and prepared (with everything loaded) and false otherwise. Turns false after the island is destroyed. TIP Useful to check when the island needs to be fully loaded or fully destroyed before continuing.  ","version":null,"tagName":"h3"},{"title":"Destroyed​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#Destroyed","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; IslandServer.Destroyed: boolean Turns true right before the island is destroyed. TIP Useful to check when the island needs to be fully working or in the process of loading before continuing. Good to pair with IslandServer.Loaded.  ","version":null,"tagName":"h3"},{"title":"Perms​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#Perms","content":"This item is read only and cannot be modified. Read Only unreleased &lt;/&gt; IslandServer.Perms: {Player } Holds the players that have perms to edit the island. Contains the owner. WARNING This property isn't implemented yet. It currently has no use.  ","version":null,"tagName":"h3"},{"title":"Model​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#Model","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; IslandServer.Model: IslandModel? Reference to the workspace model of the island, if one exists (if the island is spawned).  ","version":null,"tagName":"h3"},{"title":"HQConfig​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#HQConfig","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; IslandServer.HQConfig: ConfigTypes.HeadquartersConfig The config of the island at its current level.  ","version":null,"tagName":"h3"},{"title":"Nodes​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#Nodes","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; IslandServer.Nodes: {[ID]: NodeServer} A table of the NodeServer instances that the island contains.  ","version":null,"tagName":"h3"},{"title":"Roads​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#Roads","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; IslandServer.Roads: {[ID]: RoadServer} A table of the RoadServer instances that the island contains.  ","version":null,"tagName":"h3"},{"title":"Trucks​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#Trucks","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; IslandServer.Trucks: {[ID]: TruckServer} A table of the TruckServer instances that the island contains.  ","version":null,"tagName":"h3"},{"title":"Packages​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#Packages","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; IslandServer.Packages: {[ID]: PackageServer} A table of the PackageServer instances that the island contains.  ","version":null,"tagName":"h3"},{"title":"Cities​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#Cities","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; IslandServer.Cities: {[ID]: CityServer} A table of the CityServer instances that the island contains.  ","version":null,"tagName":"h3"},{"title":"HQNode​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#HQNode","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; IslandServer.HQNode: NodeServer? The node that is associated with the island's HQ. This property is nil until the island spawns.  ","version":null,"tagName":"h3"},{"title":"DestroyJanitor​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#DestroyJanitor","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; IslandServer.DestroyJanitor: Janitor  Gets cleaned up once the island is being destroyed. IslandServer.DestroyJanitor:Add(RunService.Heartbeat:Connect(function(dt) -- code end), &quot;Disconnect&quot;) TIP :Add() connections and instances that need to be cleaned up (destroyed/disconnected) when the island gets destroyed to battle memory leaks. INFO The first argument is the item that needs to be cleaned up and the second argument is the method invoked for cleaning up. For instances and default roblox connections, the second argument can be omitted and determined automatically.  ","version":null,"tagName":"h3"},{"title":"HQLevel​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#HQLevel","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; IslandServer.HQLevel: number The current level of the HQ.  ","version":null,"tagName":"h3"},{"title":"Cash​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#Cash","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; IslandServer.Cash: number How much cash the island currently has.  ","version":null,"tagName":"h3"},{"title":"TotalCash​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#TotalCash","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; IslandServer.TotalCash: number How much cash the island earned in total over its lifetime.  ","version":null,"tagName":"h3"},{"title":"TotalPackages​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#TotalPackages","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; IslandServer.TotalPackages: number How many packages were delivered on this island.  ","version":null,"tagName":"h3"},{"title":"TimePlayed​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#TimePlayed","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; IslandServer.TimePlayed: number For how long the island is spawned.  ","version":null,"tagName":"h3"},{"title":"IslandCreated​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#IslandCreated","content":"This item is read only and cannot be modified. Read Only Static &lt;/&gt; IslandServer.IslandCreated: Signal &lt;IslandServer&gt; Gets fired every time a new island is created with the island as its argument. WARNING This property is static, meaning it can only be accessed from the base class returned by requiring the module, not from objects of the IslandServer type. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#new","content":"Static &lt;/&gt; IslandServer.new( owner: Player? -- If specified, the island's data will be loaded from the Manager (a module script storing the player data) ) → IslandServer Creates a new instance of the IslandServer type.  ","version":null,"tagName":"h3"},{"title":"GetIsland​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#GetIsland","content":"Static &lt;/&gt; IslandServer.GetIsland(ID: number) → IslandServer? Returns the island associated with the specified ID. Returns nil if there is no island with that ID.  ","version":null,"tagName":"h3"},{"title":"GetIslandByOwner​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#GetIslandByOwner","content":"Static &lt;/&gt; IslandServer.GetIslandByOwner(owner: Player ) → IslandServer? Returns the first island it finds that has the specified player as its owner. Returns nil if the player owns no island.  ","version":null,"tagName":"h3"},{"title":"WaitForIsland​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#WaitForIsland","content":"Static &lt;/&gt; IslandServer.WaitForIsland(owner: Player ) → IslandServer Returns the first island it finds that has the specified player as its owner. Waits until an island gets created with the specified player as its owner if no island was found.  ","version":null,"tagName":"h3"},{"title":"GetClosestNode​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#GetClosestNode","content":"&lt;/&gt; IslandServer:GetClosestNode( position: Vector3 ,-- The position from which the distance is determined maxDistance: number?-- If specified, it takes only objects in the maxDistance distance into consideration ) → NodeServer? Returns the closest node from the position.  ","version":null,"tagName":"h3"},{"title":"GetClosestRoad​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#GetClosestRoad","content":"&lt;/&gt; IslandServer:GetClosestRoad( position: Vector3 ,-- The position from which the distance is determined maxDistance: number?-- If specified, it takes only objects in the maxDistance distance into consideration ) → { Road: RoadServer, Point: Vector3 } Returns the closest road from the position. INFO The Point in returns is the closest point on the road to the provided position.  ","version":null,"tagName":"h3"},{"title":"GetTrucksInHQ​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#GetTrucksInHQ","content":"&lt;/&gt; IslandServer:GetTrucksInHQ() → {[ID]: TruckServer} Returns the trucks that are currently present in the HQ, and therefore not traveling.  ","version":null,"tagName":"h3"},{"title":"GetPackagesInHQ​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#GetPackagesInHQ","content":"&lt;/&gt; IslandServer:GetPackagesInHQ() → {[ID]: PackageServer} Returns the packages that are currently present in the HQ.  ","version":null,"tagName":"h3"},{"title":"GetCityFromNode​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#GetCityFromNode","content":"&lt;/&gt; IslandServer:GetCityFromNode(node: NodeServer) → CityServer? Returns the city the provided node is associated with, if there is one.  ","version":null,"tagName":"h3"},{"title":"GetTruckCount​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#GetTruckCount","content":"&lt;/&gt; IslandServer:GetTruckCount() → number Returns how many trucks are currently present on the entire island. This includes both trucks in HQ and trucks that are traveling.  ","version":null,"tagName":"h3"},{"title":"GetHQPackageCount​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#GetHQPackageCount","content":"&lt;/&gt; IslandServer:GetHQPackageCount() → number Returns the number of packages that are currently present in the HQ.  ","version":null,"tagName":"h3"},{"title":"Spawn​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#Spawn","content":"&lt;/&gt; IslandServer:Spawn() → () Spawns the island and loads everything onto it including cities, roads, etc. Also starts spawning packages and changes the ReplicationFocus of the island's owner.  ","version":null,"tagName":"h3"},{"title":"HasPerms​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#HasPerms","content":"&lt;/&gt; IslandServer:HasPerms(player: Player ) → boolean Returns whether the provide player has perms on the island.  ","version":null,"tagName":"h3"},{"title":"UpdateHQLevel​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#UpdateHQLevel","content":"&lt;/&gt; IslandServer:UpdateHQLevel( level: number-- The new level ) → () Changes the HQ level.  ","version":null,"tagName":"h3"},{"title":"AdjustCash​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#AdjustCash","content":"&lt;/&gt; IslandServer:AdjustCash( delta: number-- By what amount should the cash be changed ) → () Changes the cash amount on the island. TIP Use this every time you want to adjust the player's cash. Using other ways may result in unexpected behavior.  ","version":null,"tagName":"h3"},{"title":"AdjustTotalPackages​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#AdjustTotalPackages","content":"&lt;/&gt; IslandServer:AdjustTotalPackages( delta: number-- By what amount should the total packages be changed ) → () Changes the total delivered packages stat on the island.  ","version":null,"tagName":"h3"},{"title":"AdjustTimePlayed​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#AdjustTimePlayed","content":"&lt;/&gt; IslandServer:AdjustTimePlayed( delta: number-- By what amount should the time played be changed ) → () Changes the time played stat on the island.  ","version":null,"tagName":"h3"},{"title":"AddNode​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#AddNode","content":"&lt;/&gt; IslandServer:AddNode(node: NodeServer) → () Adds the provided node on the island.  ","version":null,"tagName":"h3"},{"title":"AddRoad​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#AddRoad","content":"&lt;/&gt; IslandServer:AddRoad(road: RoadServer) → () Adds the provided road on the island.  ","version":null,"tagName":"h3"},{"title":"AddTruck​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#AddTruck","content":"&lt;/&gt; IslandServer:AddTruck(truck: TruckServer) → () Adds the provided truck on the island.  ","version":null,"tagName":"h3"},{"title":"AddPackage​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#AddPackage","content":"&lt;/&gt; IslandServer:AddPackage(package: PackageServer) → () Adds the provided package on the island.  ","version":null,"tagName":"h3"},{"title":"AddCity​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#AddCity","content":"&lt;/&gt; IslandServer:AddCity(city: CityServer) → () Adds the provided city on the island.  ","version":null,"tagName":"h3"},{"title":"RemoveNode​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#RemoveNode","content":"&lt;/&gt; IslandServer:RemoveNode(node: NodeServer) → () Removes the provided node from the island.  ","version":null,"tagName":"h3"},{"title":"RemoveRoad​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#RemoveRoad","content":"&lt;/&gt; IslandServer:RemoveRoad(road: RoadServer) → () Removes the provided road from the island.  ","version":null,"tagName":"h3"},{"title":"RemoveTruck​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#RemoveTruck","content":"&lt;/&gt; IslandServer:RemoveTruck(truck: TruckServer) → () Removes the provided truck from the island.  ","version":null,"tagName":"h3"},{"title":"RemovePackage​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#RemovePackage","content":"&lt;/&gt; IslandServer:RemovePackage(package: PackageServer) → () Removes the provided package from the island.  ","version":null,"tagName":"h3"},{"title":"RemoveCity​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#RemoveCity","content":"&lt;/&gt; IslandServer:RemoveCity(city: CityServer) → () Removes the provided city from the island.  ","version":null,"tagName":"h3"},{"title":"SellTruck​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#SellTruck","content":"&lt;/&gt; IslandServer:SellTruck(truck: TruckServer) → () Sells the truck. The truck gets removed from the island and the island is rewarded with some money back.  ","version":null,"tagName":"h3"},{"title":"GetStats​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#GetStats","content":"&lt;/&gt; IslandServer:GetStats() → IslandStats ","version":null,"tagName":"h3"},{"title":"Types","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer##","content":"","version":null,"tagName":"h3"},{"title":"​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#IslandStats","content":"interface IslandStats { HQLevel: number-- The current HQ level Cash: number-- The current cash on the island TotalCash: number-- The total earned cash on the island TotalPackages: number-- The total number of delivered packages TimePlayed: number-- The total time the island has been spawned for }  Returns the stats of the island.  ","version":null,"tagName":"h3"},{"title":"GetIDs​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#GetIDs","content":"&lt;/&gt; IslandServer:GetIDs() → IslandIDs ","version":null,"tagName":"h3"},{"title":"Types","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer##","content":"","version":null,"tagName":"h3"},{"title":"​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#IslandIDs","content":"interface IslandIDs { Node: {number}-- A list of the IDs of all the nodes present on the island Road: {number}-- A list of the IDs of all the roads present on the island Truck: {number}-- A list of the IDs of all the trucks present on the island Package: {number}-- A list of the IDs of all the packages present on the island City: {number}-- A list of the IDs of all the cities present on the island }  Returns the IDs of all objects located on the island.  ","version":null,"tagName":"h3"},{"title":"ReplicateAll​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#ReplicateAll","content":"&lt;/&gt; IslandServer:ReplicateAll(players: {[Player ]: true}) → () Replicates all objects located on the island to the provided set of players.  ","version":null,"tagName":"h3"},{"title":"SaveWholeIsland​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#SaveWholeIsland","content":"&lt;/&gt; IslandServer:SaveWholeIsland() → () Saves the whole island to the owner's DataStore.  ","version":null,"tagName":"h3"},{"title":"Destroy​","type":1,"pageTitle":"IslandServer","url":"/Delivery/api/IslandServer#Destroy","content":"&lt;/&gt; IslandServer:Destroy() → () Destroys the whole island and every object that is located on it. ","version":null,"tagName":"h3"}],"options":{"id":"default"}}